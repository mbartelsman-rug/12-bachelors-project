type literal
type value

type monop =
| Neg

type binop =
| Add
| Sub

type expr =
| Const literal
| Binop (binop, expr, expr)


val litToVal : literal -> value
val add : value -> value -> value
val sub : value -> value -> value


val apply (op: binop): value -> value -> value =
    branch
        let Add = op in
            add
    or
        let Sub = op in
            sub
    end


val eval: expr -> value =
λ e : expr →
    branch
        let Const lit = e in
            litToVal (lit)
    or
        let Binop (op, lhs, rhs) = e in
        let lhs_res = eval lhs in
        let rhs_res = eval rhs in
            apply op lhs_res rhs_res
    end
