
(*============================================*
 * VALUES                                     *
 *--------------------------------------------*
 * Contains the definitions and filters for   *
 * operation on runtime values and their      *
 * possible types                             *
 *============================================*)

type value_t =
| UnitVal
| IntVal    (int_t)
| EitherVal (either_t)
| PairVal   (pair_t)
| FuncVal   (func_t)
| ChanIdVal (chan_id_t)

(* Asserts that the value is a unit value and return it *)
val value_as_unit (v: value_t): (value_t) =
  let UnitVal = v in UnitVal

  (* Asserts that the value is an Integer and returns the integer *)
  val value_as_int (v: value_t): (int_t) =
    let IntVal i = v in i
  
(* Asserts that the value is an Either and returns the union *)
val value_as_either (v: value_t): (either_t) =
  let EitherVal e = v in e

(* Asserts that the value is a Pair and returns the union *)
val value_as_pair (v: value_t): (pair_t) =
  let PairVal p = v in p

(* Asserts that the value is a function closure and returns the closure *)
val value_as_func (v: value_t): (func_t) =
  let FuncVal f = v in f
  
(* Asserts that the value is a channel and returns the it *)
val value_as_chan (v: value_t): (chan_id_t) =
  let ChanIdVal c = v in c
  