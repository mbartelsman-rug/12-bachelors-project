
(*============================================*
 * VALUES                                     *
 *--------------------------------------------*
 * Contains the definitions and filters for   *
 * operation on runtime values and their      *
 * possible types                             *
 *============================================*)

type value_t =
| UnitVal
| IntVal     (int_t)
| EitherVal  (either_t)
| PairVal    (pair_t)
| FuncVal    (func_t)
| RecFuncVal (rec_func_t)
| PidVal     (pid_t)

val unint_as_value    (_: ()):         (value_t) = UnitVal
val int_as_value      (i: int_t):      (value_t) = IntVal i
val either_as_value   (e: either_t):   (value_t) = EitherVal e
val pair_as_value     (p: pair_t):     (value_t) = PairVal p
val func_as_value     (f: func_t):     (value_t) = FuncVal f
val rec_func_as_value (r: rec_func_t): (value_t) = RecFuncVal r
val pid_as_value      (p: pid_t):      (value_t) = PidVal p

(* Asserts that the value is a unit value and return it *)
val value_as_unit (v: value_t): (value_t) =
  let UnitVal = v in UnitVal

(* Asserts that the value is an Integer and returns the integer *)
val value_as_int (v: value_t): (int_t) =
  let IntVal i = v in i
  
(* Asserts that the value is an Either and returns the union *)
val value_as_either (v: value_t): (either_t) =
  let EitherVal e = v in e

(* Asserts that the value is a Pair and returns the union *)
val value_as_pair (v: value_t): (pair_t) =
  let PairVal p = v in p

(* Asserts that the value is a function closure and returns the closure *)
val value_as_func (v: value_t): (func_t) =
  let FuncVal f = v in f

(* Asserts that the value is a function closure and returns the closure *)
val value_as_rec_func (v: value_t): (rec_func_t) =
  let RecFuncVal rf = v in rf
  
(* Asserts that the value is a channel and returns the it *)
val value_as_pid (v: value_t): (pid_t) =
  let PidVal p = v in p
  