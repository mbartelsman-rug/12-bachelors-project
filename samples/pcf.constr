type program = lterm

type ident
type globalcontext
type lit
type int

type localcontext = unit

type env1 = (ident, (ident program_point * globalcontext)) map
type env = env1 set
type clos = (ident program_point * lterm program_point * env1) set
type value = clos * int

val envset : env1 * ident * (ident program_point * globalcontext) -> env1
val framepush : globalcontext * program_point -> globalcontext
val int_bot : unit -> int
val isBot : int -> int list
val intOfLit : lit -> int
val plus : int * int -> int
val isZero : localcontext * int -> localcontext list
val isNotZero : localcontext * int -> localcontext list

var vars : (ident program_point * globalcontext, value) map

rule in var eval : env
rule out var eval : value
rule in eval(pp, sigmas, env) = [((), env)]
rule out eval(pp, sigmas, sigma, v) = v
hook in eval(pp, sigmas, sigma, env, term_) = [(sigmas, env)]
hook out eval(pp, sigmas, sigma, result) = [(sigma, result)]
hook in eval^call(pp, sigmas, sigma, env, term_) = [(framepush(sigmas, pp), env)]
hook out eval^call(pp, sigmas, sigma, result) = [(sigma, result)]

filter mkClos(pp, sigmas, sigma, name, term_, env) =
  [(sigma, (join n in name, join t in term_, join e in env, {(n, t, e)}, int_bot ()))]
filter mkInt(pp, sigmas, sigma, x) =
  [(sigma, ({}, x))]
filter getClos(pp, sigmas, sigma, value) =
  let (clos, _) = value in join (n, t, e) in clos, [(sigma, {n}, {t}, {e})]
filter getInt(pp, sigmas, sigma, value) =
  let (_, x) = value in join y in isBot(x), [(sigma, y)]

filter extEnv(pp, sigmas, sigma, env, name, value) =
  let sigmas1 = framepush(sigmas, pp) in
  [(sigma, join n in name, (value <= vars[(n, sigmas1)]) /\ join e in env, {envset(e, subterm(n), (n, sigmas1))})]
filter getEnv(pp, sigmas, sigma, name, env) =
  [(sigma, join n in name, join e in env, vars[e[subterm(n)]])]

filter intOfLit(pp, sigmas, sigma, x) =
  [(sigma, join pp1 in x, intOfLit(subterm(pp1)))]
filter plus(pp, sigmas, sigma, x1, x2) =
  [(sigma, plus(x1, x2))]
filter isZero(pp, sigmas, sigma, x) = isZero(sigma, x)
filter isNotZero(pp, sigmas, sigma, x) = isNotZero(sigma, x)

