type literal

type value

type binop =
| Add
| Div
| Mult
| Sub

type expr =
| Const literal
| Binop (binop, expr, expr)

val litToVal : literal → value
val add : value → value → value
val sub : value → value → value
val mult : value → value → value
val div : value → value → value


val apply (b:binop): value → value → value =
	branch
		let Add = b in add
	or
		let Div = b in div
	or
		let Mult = b in mult
	or
		let Sub = b in sub
	end

val eval: expr → value =
λ e : expr →
	branch
		let Const t = e in
		litToVal (t)
	or
		let Binop (op, t1, t2) = e in
		let f1 = eval t1 in
		let f2 = eval t2 in
		apply op f1 f2
	end
