type ident
type state
type value

type lambdaterm =
| Val value
| Var ident
| Plus (lambdaterm, lambdaterm)
| Assign (ident, lambdaterm)
| Seq (lambdaterm, lambdaterm)
| Rewind lambdaterm
| RewindSeq (lambdaterm, lambdaterm)
| WeirdLet (ident, lambdaterm, lambdaterm)

val add : value → value → value
val read : ident → state → value
val write : ident → state → value → state
val skip : value
val isskip : value → ()

val eval (s:state) (t:lambdaterm): (state, value) =
branch
	let Val v = t in
	(s, v)
or
	let Var x = t in
	let v = read x s in
	(s, v)
or
	let Plus (t1, t2) = t in
	let (s', v1) = eval s t1 in
	let (s'', v2) = eval s' t2 in
	let v = add v1 v2 in
	(s'', v)
or
	let Assign (x, t') = t in
	let (s', v1) = eval s t' in
	let s'' = write x s' v1 in
	(s'', skip)
or
	let Seq (t1, t2) = t in
	let (s', v) = eval s t1 in
	isskip v;
	eval s' t2
or
	let Rewind (t') = t in
	let (_, v) = eval s t' in
	(s, v)
or
	let RewindSeq (t1, t2) = t in
	let _ = eval s t1 in
	eval s t2
or
	let WeirdLet (x, t1, t2) = t in
	let (s', v1) = eval s t1 in
	let s'' = write x s' v1 in
	let (_, v2) = eval s'' t2 in
	(s, v2)
end
