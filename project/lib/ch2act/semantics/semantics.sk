type string_t
type int_t

type name_t := string_t
type chan_t := string_t

type lit_t =
| UnitVal
| IntVal (int_t)

type expr_act_t =
| ActRet (lit_t)
| ActVar (name_t)
| ActSeq (expr_act_t, expr_act_t)

| ActFunc (name_t, expr_act_t)
| ActRecFunc (name_t, name_t, expr_act_t)
| ActCall (expr_act_t, expr_act_t)
| ActLet (name_t, expr_act_t, expr_act_t)

| ActNeg (expr_act_t)
| ActAdd (expr_act_t, expr_act_t)
| ActSub (expr_act_t, expr_act_t)
| ActMul (expr_act_t, expr_act_t)
| ActDiv (expr_act_t, expr_act_t)

| ActPair (expr_act_t, expr_act_t)
| ActFst  (expr_act_t)
| ActSnd  (expr_act_t)

| ActLeft  (expr_act_t)
| ActRight (expr_act_t)
| ActMatch (expr_act_t, expr_act_t, expr_act_t)

| ActSelf
| ActReceive
| ActSpawn (expr_act_t)
| ActSend (expr_act_t, expr_act_t)

type expr_ch_t =
| ChRet (lit_t)
| ChVar (name_t)
| ChSeq (expr_ch_t, expr_ch_t)

| ChFunc (name_t, expr_ch_t)
| ChRecFunc (name_t, name_t, expr_ch_t)
| ChCall (expr_ch_t, expr_ch_t)
| ChLet (name_t, expr_ch_t, expr_ch_t)

| ChNeg (expr_ch_t)
| ChAdd (expr_ch_t, expr_ch_t)
| ChSub (expr_ch_t, expr_ch_t)
| ChMul (expr_ch_t, expr_ch_t)
| ChDiv (expr_ch_t, expr_ch_t)

| ChPair (expr_ch_t, expr_ch_t)
| ChFst  (expr_ch_t)
| ChSnd  (expr_ch_t)

| ChLeft  (expr_ch_t)
| ChRight (expr_ch_t)
| ChMatch (expr_ch_t, expr_ch_t, expr_ch_t)

| ChNewCh
| ChGive (expr_ch_t, expr_ch_t)
| ChTake (expr_ch_t)
| ChFork (expr_ch_t)

val string_unique_id : () -> (string_t)

val translate (expr: expr_ch_t): (expr_act_t) =
  branch
    translate_ret (expr)
  or
    translate_var (expr)
  or
    translate_seq (expr)
  or
    translate_func (expr)
  or
    translate_rec_func (expr)
  or
    translate_call (expr)
  or
    translate_let (expr)
  or
    translate_neg (expr)
  or
    translate_add (expr)
  or
    translate_sub (expr)
  or
    translate_mul (expr)
  or
    translate_div (expr)
  or
    translate_pair (expr)
  or
    translate_fst (expr)
  or
    translate_snd (expr)
  or
    translate_left (expr)
  or
    translate_right (expr)
  or
    translate_match (expr)
  or
    translate_new_ch (expr)
  or
    translate_give (expr)
  or
    translate_take (expr)
  or
    translate_fork (expr)
  end

val translate_ret (expr: expr_ch_t): (expr_act_t) =
  let ChRet (value) = expr in
  ActRet (value)

val translate_var (expr: expr_ch_t): (expr_act_t) =
  let ChVar (name) = expr in
  ActVar (name)

val translate_seq (expr: expr_ch_t): (expr_act_t) =
  let ChSeq (ch_a, ch_b) = expr in
  let act_a = translate (ch_a) in
  let act_b = translate (ch_b) in
  ActSeq (act_a, act_b)

val translate_func (expr: expr_ch_t): (expr_act_t) =
  let ChFunc (param, ch_body) = expr in
  let act_body = translate (ch_body) in
  ActFunc (param, act_body)

val translate_rec_func (expr: expr_ch_t): (expr_act_t) =
  let ChRecFunc (name, param, ch_body) = expr in
  let act_body = translate (ch_body) in
  ActRecFunc (name, param, act_body)

val translate_call (expr: expr_ch_t): (expr_act_t) =
  let ChCall (ch_func, ch_arg) = expr in
  let act_func = translate (ch_func) in
  let act_arg = translate (ch_arg) in
  ActCall (act_func, act_arg)

val translate_let (expr: expr_ch_t): (expr_act_t) =
let ChLet (param, ch_arg, ch_body) = expr in
let act_arg = translate (ch_arg) in
let act_body = translate (ch_body) in
ActLet (param, act_arg, act_body)

val translate_neg (expr: expr_ch_t): (expr_act_t) =
  let ChNeg (ch_i) = expr in
  let act_i = translate (ch_i) in
  ActNeg (act_i)

val translate_add (expr: expr_ch_t): (expr_act_t) =
  let ChAdd (ch_i, ch_j) = expr in
  let act_i = translate (ch_i) in
  let act_j = translate (ch_j) in
  ActAdd (act_i, act_j)

val translate_sub (expr: expr_ch_t): (expr_act_t) =
  let ChSub (ch_i, ch_j) = expr in
  let act_i = translate (ch_i) in
  let act_j = translate (ch_j) in
  ActSub (act_i, act_j)

val translate_mul (expr: expr_ch_t): (expr_act_t) =
  let ChMul (ch_i, ch_j) = expr in
  let act_i = translate (ch_i) in
  let act_j = translate (ch_j) in
  ActMul (act_i, act_j)

val translate_div (expr: expr_ch_t): (expr_act_t) =
  let ChDiv (ch_i, ch_j) = expr in
  let act_i = translate (ch_i) in
  let act_j = translate (ch_j) in
  ActDiv (act_i, act_j)

val translate_pair (expr: expr_ch_t): (expr_act_t) =
  let ChPair (ch_fst, ch_snd) = expr in
  let act_fst = translate (ch_fst) in
  let act_snd = translate (ch_snd) in
  ActSeq (act_fst, act_snd)

val translate_fst (expr: expr_ch_t): (expr_act_t) =
  let ChFst (ch_pair) = expr in
  let act_pair = translate (ch_pair) in
  ActFst (act_pair)
  
val translate_snd (expr: expr_ch_t): (expr_act_t) =
  let ChSnd (ch_pair) = expr in
  let act_pair = translate (ch_pair) in
  ActSnd (act_pair)

val translate_left (expr: expr_ch_t): (expr_act_t) =
  let ChLeft (ch_cont) = expr in
  let act_cont = translate (ch_cont) in
  ActLeft (act_cont)

val translate_right (expr: expr_ch_t): (expr_act_t) =
  let ChRight (ch_cont) = expr in
  let act_cont = translate (ch_cont) in
  ActRight (act_cont)

val translate_match (expr: expr_ch_t): (expr_act_t) =
  let ChMatch (ch_arg, ch_left, ch_right) = expr in
  let act_arg = translate (ch_arg) in
  let act_left = translate (ch_left) in
  let act_right = translate (ch_right) in
  ActMatch (act_arg, act_left, act_right)

val translate_new_ch (expr: expr_ch_t): (expr_act_t) =
  let ChNewCh = expr in
  let body_expr = body () in
  let list_1 = list_empty () in
  let list_2 = list_empty () in
  ActSpawn (
    ActCall (
      body_expr,
      ActPair (
        list_1,
        list_2
      )
    )
  )

val translate_give (expr: expr_ch_t): (expr_act_t) =
  let ChGive (ch_tgt, ch_msg) = expr in
  let act_msg = translate (ch_msg) in
  let act_tgt = translate (ch_tgt) in
  ActSend (ActLeft (act_msg), act_tgt)

val translate_take (expr: expr_ch_t): (expr_act_t) =
  let ChTake (ch_tgt) = expr in
  let act_tgt = translate (ch_tgt) in
  let self_pid = string_unique_id () in
  ActLet (
    self_pid,
    ActSelf,
    ActSeq (
      ActSend (ActRight (ActVar self_pid), act_tgt),
      ActReceive 
    ))

val translate_fork (expr: expr_ch_t): (expr_act_t) =
  let ChFork (ch_expr) = expr in
  let new_act = string_unique_id () in
  let act_expr = translate (ch_expr) in
  ActLet (new_act, act_expr, ActRet UnitVal)

val list_empty (_: ()): expr_act_t = ActLeft (ActRet UnitVal)

val body: () -> expr_act_t
val drain: () -> expr_act_t
