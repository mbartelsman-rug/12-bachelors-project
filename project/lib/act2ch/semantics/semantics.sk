type string_t
type int_t

type name_t := string_t
type chan_t := string_t

type lit_t =
| UnitVal
| IntVal (int_t)

type expr_act_t =
| ActRet (lit_t)
| ActVar (name_t)
| ActSeq (expr_act_t, expr_act_t)

| ActFunc (name_t, expr_act_t)
| ActRecFunc (name_t, name_t, expr_act_t)
| ActCall (expr_act_t, expr_act_t)
| ActLet (name_t, expr_act_t, expr_act_t)

| ActNeg (expr_act_t)
| ActAdd (expr_act_t, expr_act_t)
| ActSub (expr_act_t, expr_act_t)
| ActMul (expr_act_t, expr_act_t)
| ActDiv (expr_act_t, expr_act_t)

| ActPair (expr_act_t, expr_act_t)
| ActFst  (expr_act_t)
| ActSnd  (expr_act_t)

| ActLeft  (expr_act_t)
| ActRight (expr_act_t)
| ActMatch (expr_act_t, expr_act_t, expr_act_t)

| ActSelf
| ActReceive
| ActSpawn (expr_act_t)
| ActSend (expr_act_t, expr_act_t)

type expr_ch_t =
| ChRet (lit_t)
| ChVar (name_t)
| ChSeq (expr_ch_t, expr_ch_t)

| ChFunc (name_t, expr_ch_t)
| ChRecFunc (name_t, name_t, expr_ch_t)
| ChCall (expr_ch_t, expr_ch_t)
| ChLet (name_t, expr_ch_t, expr_ch_t)

| ChNeg (expr_ch_t)
| ChAdd (expr_ch_t, expr_ch_t)
| ChSub (expr_ch_t, expr_ch_t)
| ChMul (expr_ch_t, expr_ch_t)
| ChDiv (expr_ch_t, expr_ch_t)

| ChPair (expr_ch_t, expr_ch_t)
| ChFst  (expr_ch_t)
| ChSnd  (expr_ch_t)

| ChLeft  (expr_ch_t)
| ChRight (expr_ch_t)
| ChMatch (expr_ch_t, expr_ch_t, expr_ch_t)

| ChNewCh
| ChGive (expr_ch_t, expr_ch_t)
| ChTake (expr_ch_t)
| ChFork (expr_ch_t)

val string_unique_id : () -> (string_t)

val translate ((expr, ch): (expr_act_t, chan_t)): (expr_ch_t) =
  branch
    translate_ret (expr, ch)
  or
    translate_var (expr, ch)
  or
    translate_seq (expr, ch)
  or
    translate_func (expr, ch)
  or
    translate_rec_func (expr, ch)
  or
    translate_call (expr, ch)
  or
    translate_let (expr, ch)
  or
    translate_neg (expr, ch)
  or
    translate_add (expr, ch)
  or
    translate_sub (expr, ch)
  or
    translate_mul (expr, ch)
  or
    translate_div (expr, ch)
  or
    translate_pair (expr, ch)
  or
    translate_fst (expr, ch)
  or
    translate_snd (expr, ch)
  or
    translate_left (expr, ch)
  or
    translate_right (expr, ch)
  or
    translate_match (expr, ch)
  or
    translate_self (expr, ch)
  or
    translate_receive (expr, ch)
  or
    translate_spawn (expr, ch)
  or
    translate_send (expr, ch)
  end

val translate_ret ((expr, _): (expr_act_t, chan_t)): (expr_ch_t) =
  let ActRet (value) = expr in
  ChRet (value)

val translate_var ((expr, _): (expr_act_t, chan_t)): (expr_ch_t) =
  let ActVar (name) = expr in
  ChVar (name)

val translate_seq ((expr, ch): (expr_act_t, chan_t)): (expr_ch_t) =
  let ActSeq (act_a, act_b) = expr in
  let ch_a = translate (act_a, ch) in
  let ch_b = translate (act_b, ch) in
  ChSeq (ch_a, ch_b)

val translate_func ((expr, ch): (expr_act_t, chan_t)): (expr_ch_t) =
  let ActFunc (param, act_body) = expr in
  let ch_param = string_unique_id () in
  let ch_body = translate (act_body, ch) in
  ChFunc (param, ChFunc (ch_param, ch_body))

val translate_rec_func ((expr, ch): (expr_act_t, chan_t)): (expr_ch_t) =
  let ActRecFunc (name, param, act_body) = expr in
  let ch_param = string_unique_id () in
  let ch_body = translate (act_body, ch) in
  ChRecFunc (name, param, ChFunc (ch_param, ch_body))
  (* TODO: ^^^ Verify this ^^^ *)

val translate_call ((expr, ch): (expr_act_t, chan_t)): (expr_ch_t) =
  let ActCall (act_func, act_arg) = expr in
  let name = string_unique_id () in
  let ch_func = translate (act_func, ch) in
  let ch_arg = translate (act_arg, ch) in
  ChLet (name, 
    ChCall (ch_func, ch_arg),
    ChCall (ChVar (name), ChVar (ch))
  )

val translate_let ((expr, ch): (expr_act_t, chan_t)): (expr_ch_t) =
  let ActLet (param, act_arg, act_body) = expr in
  let ch_arg = translate (act_arg, ch) in
  let ch_body = translate (act_body, ch) in
  ChLet (param, ch_arg, ch_body)

val translate_neg ((expr, ch): (expr_act_t, chan_t)): (expr_ch_t) =
  let ActNeg (act_i) = expr in
  let ch_i = translate (act_i, ch) in
  ChNeg (ch_i)

val translate_add ((expr, ch): (expr_act_t, chan_t)): (expr_ch_t) =
  let ActAdd (act_i, act_j) = expr in
  let ch_i = translate (act_i, ch) in
  let ch_j = translate (act_j, ch) in
  ChAdd (ch_i, ch_j)

val translate_sub ((expr, ch): (expr_act_t, chan_t)): (expr_ch_t) =
  let ActSub (act_i, act_j) = expr in
  let ch_i = translate (act_i, ch) in
  let ch_j = translate (act_j, ch) in
  ChSub (ch_i, ch_j)

val translate_mul ((expr, ch): (expr_act_t, chan_t)): (expr_ch_t) =
  let ActMul (act_i, act_j) = expr in
  let ch_i = translate (act_i, ch) in
  let ch_j = translate (act_j, ch) in
  ChMul (ch_i, ch_j)

val translate_div ((expr, ch): (expr_act_t, chan_t)): (expr_ch_t) =
  let ActDiv (act_i, act_j) = expr in
  let ch_i = translate (act_i, ch) in
  let ch_j = translate (act_j, ch) in
  ChDiv (ch_i, ch_j)

val translate_pair ((expr, ch): (expr_act_t, chan_t)): (expr_ch_t) =
  let ActPair (act_fst, act_snd) = expr in
  let ch_fst = translate (act_fst, ch) in
  let ch_snd = translate (act_snd, ch) in
  ChSeq (ch_fst, ch_snd)

val translate_fst ((expr, ch): (expr_act_t, chan_t)): (expr_ch_t) =
  let ActFst (act_pair) = expr in
  let ch_pair = translate (act_pair, ch) in
  ChFst (ch_pair)
  
val translate_snd ((expr, ch): (expr_act_t, chan_t)): (expr_ch_t) =
  let ActSnd (act_pair) = expr in
  let ch_pair = translate (act_pair, ch) in
  ChSnd (ch_pair)

val translate_left ((expr, ch): (expr_act_t, chan_t)): (expr_ch_t) =
  let ActLeft (act_cont) = expr in
  let ch_cont = translate (act_cont, ch) in
  ChLeft (ch_cont)

val translate_right ((expr, ch): (expr_act_t, chan_t)): (expr_ch_t) =
  let ActRight (act_cont) = expr in
  let ch_cont = translate (act_cont, ch) in
  ChRight (ch_cont)

val translate_match ((expr, ch): (expr_act_t, chan_t)): (expr_ch_t) =
  let ActMatch (act_arg, act_left, act_right) = expr in
  let ch_arg = translate (act_arg, ch) in
  let ch_left = translate (act_left, ch) in
  let ch_right = translate (act_right, ch) in
  ChMatch (ch_arg, ch_left, ch_right)

val translate_self ((expr, ch): (expr_act_t, chan_t)): (expr_ch_t) =
  let ActSelf = expr in
  ChVar (ch)

val translate_receive ((expr, ch): (expr_act_t, chan_t)): (expr_ch_t) =
  let ActReceive = expr in
  ChTake (ChVar (ch))

val translate_spawn ((expr, _): (expr_act_t, chan_t)): (expr_ch_t) =
  let ActSpawn (act_expr) = expr in
  let new_ch = string_unique_id () in
  let ch_expr = translate (act_expr, new_ch) in
  ChLet (new_ch, ChNewCh,
  ChSeq (
    ChFork (ch_expr),
    ChVar (new_ch)
  ))

val translate_send ((expr, ch): (expr_act_t, chan_t)): (expr_ch_t) =
  let ActSend (act_msg, act_tgt) = expr in
  let ch_msg = translate (act_msg , ch) in
  let ch_tgt = translate (act_tgt , ch) in
  ChGive (ch_tgt, ch_msg)
