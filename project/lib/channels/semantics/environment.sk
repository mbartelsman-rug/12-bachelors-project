
(*============================================*
 * ENVIRONMENT                                *
 *--------------------------------------------*
 * Contains the definitions and filters for   *
 * the execution environemnt of the program   *
 *============================================*)

(* TODO: Maybe remove func_env *)

type env_t := (bool_t, thread_pool_t, chan_env_t, func_env_t)

type thread_pool_t := queue_t<(expr_t, bool_t)>
type chan_env_t := dict_t<chan_buff_t>
type func_env_t := dict_t<value_t>

val env_get_threads (env: env_t): (thread_pool_t) =
  let (_, th, _, _) = env in th

val env_set_threads ((env, th'): (env_t, thread_pool_t)): (env_t) =
  let (wt, _, ch, fn) = env in
  (wt, th', ch, fn)

val env_get_channels (env: env_t): (chan_env_t) =
  let (_, _, ch, _) = env in ch

val env_set_channels ((env, ch'): (env_t, chan_env_t)): (env_t) =
  let (wt, th, _, fn) = env in
  (wt, th, ch', fn)

val env_get_functions (env: env_t): (func_env_t) =
  let (_, _, _, fn) = env in fn

val env_set_functions ((env, fn'): (env_t, func_env_t)): (env_t) =
  let (wt, th, ch, _) = env in
  (wt, th, ch, fn')

val env_set_waiting (env: env_t): (env_t) =
  let (_, th, ch, fn) = env in
  (True, th, ch, fn)

val env_unset_waiting (env: env_t): (env_t) =
  let (_, th, ch, fn) = env in
  (False, th, ch, fn)
  
val env_read_chan_buff ((env, id): (env_t, chan_id_t)): (chan_buff_t) =
  let chans = env_get_channels (env) in
  let buff = dict_read<chan_buff_t> (chans, id) in
  buff

val env_write_chan_buff ((env, id, buff): (env_t, chan_id_t, chan_buff_t)): (env_t) =
  let chans = env_get_channels (env) in
  let chans' = dict_write<chan_buff_t> (chans, id, buff) in
  let env' = env_set_channels (env, chans') in
  env'

val env_fork ((env, expr): (env_t, expr_t)): (env_t) =
  let tpool = env_get_threads (env) in
  let tpool' = queue_enqueue<(expr_t, bool_t)> (tpool, (expr, False)) in
  let env' = env_set_threads (env, tpool') in
  env'

val env_read_func ((env, name): (env_t, name_t)): (value_t) =
  let funs = env_get_functions (env) in
  let f = dict_read<value_t> (funs, name) in
  f

val env_write_func ((env, name, func): (env_t, name_t, value_t)): (env_t) =
  let funcs = env_get_functions (env) in
  let funcs' = dict_write<value_t> (funcs, name, func) in
  let env' = env_set_functions (env, funcs') in
  env'
