
(*============================================*
 * ACTORS                                     *
 *--------------------------------------------*
 * Definitions and operations on actors       *
 *============================================*)

type pid_t := string_t
type inbox_t := queue_t<value_t>

val actor_self: (env_t) -> (pid_t)

val actor_receive ((env, pid): (env_t, pid_t)): (env_t, value_t) =
  let inbox = env_get_inbox (env, pid) in
  let (inbox', msg) = queue_dequeue<value_t> (inbox) in
  let env' = env_set_inbox (env, pid, inbox') in
  (env', msg)

val actor_spawn ((env, expr): (env_t, expr_t)): (env_t, pid_t) =
  let pid = string_unique_id () in

  let tpool = env_get_threads (env) in
  let tpool' = queue_enqueue<(pid_t, expr_t)> (tpool, (pid, expr)) in
  let env' = env_set_threads (env, tpool') in

  let inbox = queue_new<value_t> () in
  let env'' = env_set_inbox (env', pid, inbox) in
  (env'', pid)

val actor_send ((env, pid, value): (env_t, pid_t, value_t)): (env_t) =
  let inbox = env_get_inbox (env, pid) in
  let inbox' = queue_enqueue<value_t> (inbox, value) in
  let env' = env_set_inbox (env, pid, inbox') in
  env'


